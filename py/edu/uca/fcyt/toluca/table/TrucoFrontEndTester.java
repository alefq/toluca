/*
 * TrucoFrontEndTester.java
 *
 * Created on 3 de abril de 2003, 11:25 PM
 */

package py.edu.uca.fcyt.toluca.table;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JFrame;

import py.edu.uca.fcyt.game.ChatPanelContainer;
import py.edu.uca.fcyt.toluca.event.RoomEvent;
import py.edu.uca.fcyt.toluca.event.TableEvent;
import py.edu.uca.fcyt.toluca.event.TableListener;
import py.edu.uca.fcyt.toluca.game.TrucoGameClient;
import py.edu.uca.fcyt.toluca.game.TrucoPlayer;
import py.edu.uca.fcyt.toluca.game.TrucoTeam;

/**
 *
 * @author  PABLO JAVIER
 */
class TrucoFrontEndTester extends JFrame implements TableListener {
    private Vector tables;
    private Table hostTable;
    
    /** Creates new form TrucoFrontEndTester */
    public TrucoFrontEndTester() {
        tables = new Vector();
        initComponents();
        jbJoin.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pJugadores = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtName = new javax.swing.JTextField();
        jlRating = new javax.swing.JLabel();
        jtRating = new javax.swing.JTextField();
        jbJoin = new javax.swing.JButton();
        jbCreate = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jlName.setText("Nombre:");
        pJugadores.add(jlName);

        jtName.setPreferredSize(new java.awt.Dimension(100, 20));
        pJugadores.add(jtName);

        jlRating.setText("Rating:");
        pJugadores.add(jlRating);

        jtRating.setPreferredSize(new java.awt.Dimension(50, 20));
        jtRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtRatingActionPerformed(evt);
            }
        });

        pJugadores.add(jtRating);

        jbJoin.setText("Unir");
        jbJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbJoinActionPerformed(evt);
            }
        });

        pJugadores.add(jbJoin);

        jbCreate.setText("Crear nueva");
        jbCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCreateActionPerformed(evt);
            }
        });

        pJugadores.add(jbCreate);

        getContentPane().add(pJugadores, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    public void chatMessageSent(ChatPanelContainer cpc, TrucoPlayer player, String htmlMessage) {
        
    }
    
    
    private void jbJoinActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jbJoinActionPerformed
        addTable(false);
    }//GEN-LAST:event_jbJoinActionPerformed
    
    private void addTable(boolean host) {
        Enumeration tEnum;
        Enumeration pEnum;
        TrucoPlayer player;
        Table table;
        
        // crea el TrucoPlayer
        player = new TrucoPlayer(jtName.getText());
        
        // crea el Table con player actual = 'player'
        // y registra este TrucoFrontEndTester como
        // listener de eventos de mesa
        table = new Table(player, host);
        table.addTableListener(this);
        
        if (host) 
        {
            hostTable = table;
            table.sitPlayer(player, 0);
        }
        else 
        {
            // agrega a la nueva tabla los Players cargados
            for (int i = 0; i < hostTable.getPlayerCount(); i++)
                table.addPlayer(hostTable.getPlayer(i));
            
            // sienta a los jugadores
            for (int i = 0; i < 6; i++)
                if (hostTable.getPlayerInChair(i) != null)
                    table.sitPlayer
                    (
                    	hostTable.getPlayerInChair(i), i
                    );
        }
        
        // agrega a la nueva tabla al vector de tablas
        tables.add(table);
        
        // obtiene las tablas creadas
        tEnum = tables.elements();
        
        // agrega a cada tabla el TrucoPlayer creado
        while (tEnum.hasMoreElements())
            ((Table) tEnum.nextElement()).addPlayer(player);
        
        table.initResources();
    }
    
    
    private void jbCreateActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jbCreateActionPerformed
        jbCreate.setEnabled(false);
        jbJoin.setEnabled(true);
        addTable(true);
    }//GEN-LAST:event_jbCreateActionPerformed
    
    private void jtRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtRatingActionPerformed
            }//GEN-LAST:event_jtRatingActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TrucoFrontEndTester().show();
        System.out.println(" - TrucoFrontEndTester - ");
        System.out.println
        ( 
        "User dir: " + System.getProperty("user.dir")
        );
    }
    
    
    public void chatMessageSent(TrucoPlayer player, String htmlMessage) {
    }
    
    
    /** Invocado cuando se desea iniciar el juego */
    public void gameStartRequest(TableEvent event) {
        Enumeration tEnum;
        TrucoGameClient tGame;
        TrucoTeam tTeams[];
        
        System.out.println("Requesting game start...");
        
        tTeams = event.getTable().createTeams();
        
        // se crea el TrucoGame con los teams creados
        tGame = new TrucoGameClient(tTeams[0], tTeams[1]);
        
        // se llama al 'startGame' de todas las tablas
        tEnum = tables.elements();
        while (tEnum.hasMoreElements()) {
            ((Table) tEnum.nextElement()).startGame(tGame);
        }
        
        // da la orden de inicio de juego a 'tGame'
        tGame.startGame();
        
        jbJoin.setEnabled(false);
    }
    
    public void gameStarted(TableEvent event){}
    
    
    public void playerJoined(TrucoPlayer player) {
        System.out.println(player.getName() + " joined");
    }
    
    public void playerKickRequest(TableEvent event) {
        Iterator tIter;
        Table table;
        TrucoPlayer player;
        
        player = event.getPlayer(0);
        
        System.out.println("Kick request for " + player.getName());
        
        tIter = tables.iterator();
        while (tIter.hasNext()) {
            table = (Table) tIter.next();
            if (table.getPlayer() == player) {
                table.finish();
                tIter.remove();
            }
            else
                table.kickPlayer(player);
        }
    }
    
    public void playerKicked(TableEvent event) {
        System.out.println
        (
        event.getPlayer(0).getName() +
        " kicked of table of " +
        event.getTable().getPlayer().getName()
        );
    }
    
    public void playerLeft(TrucoPlayer player) {
    }
    
    
    public void playerLeft(TableEvent event) {
        Iterator tIter;
        TrucoPlayer player;
        Table table;
        
        table = event.getTable();
        player = table.getPlayer();
        
        System.out.println("TrucoPlayer " + player.getName() + " left");
        
        // quita la tabla de la lista
        tables.remove(table);
        
        if (table == hostTable) {
            // anula la tabla host
            hostTable = null;
            
            // se llama al 'finish' de todas las tablas
            tIter = tables.iterator();
            while (tIter.hasNext()) {
                ((Table) tIter.next()).finish();
                tIter.remove();
            }
        }
        else {
            // se llama al 'removePlayer' de todas las tablas
            tIter = tables.iterator();
            while (tIter.hasNext()) {
                ((Table) tIter.next()).removePlayer(player);
            }
        }
        
        // habilita el boton de "unir" y deshabilita
        // el botï¿½n "crear"
        jbCreate.setEnabled(hostTable == null);
        jbJoin.setEnabled(hostTable != null);
    }
    
    public void playerSitRequest(TableEvent event) {
        Enumeration tEnum;
        
        // se llama al 'playerSit' de todas las tablas
        tEnum = tables.elements();
        while (tEnum.hasMoreElements()) {
            ((Table) tEnum.nextElement()).sitPlayer
            (
            event.getTable().getPlayer(),
            event.getValue()
            );
        }
    }
    
    public void playerSit(TableEvent event) {
    }
    
    
    public void tableLocked(Table table) {
        System.out.println("Table locked");
    }
    
    
    public void tableUnlocked(Table table) {
        System.out.println("Table unlocked");
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pJugadores;
    private javax.swing.JButton jbCreate;
    private javax.swing.JLabel jlRating;
    private javax.swing.JTextField jtRating;
    private javax.swing.JTextField jtName;
    private javax.swing.JLabel jlName;
    private javax.swing.JButton jbJoin;
    // End of variables declaration//GEN-END:variables
    
    public void signSendRequest(TableEvent event) {
        Enumeration tEnum;
        
        // se llama al 'sendSign' de todas las tablas
        tEnum = tables.elements();
        while (tEnum.hasMoreElements()) {
            ((Table) tEnum.nextElement()).showSign(event);
        }
    }
    
    public void signSent(TableEvent event) {
    }
    
    
    public void chatMessageRequested
    (
    ChatPanelContainer cpc, TrucoPlayer player, String htmlMessage
    ) {
        Enumeration tEnum;
        
        tEnum = tables.elements();
        while (tEnum.hasMoreElements()) {
            ((Table) tEnum.nextElement()).showChatMessage(player, htmlMessage);
        }
    }
    
    public void gameFinished(TableEvent event) {
        event.getTable().sitPlayer(hostTable.getPlayer(), 0);
        jbJoin.setEnabled(true);
    }
    
    public void showPlayed(TableEvent event) {
//        Enumeration tEnum;
//        
//        tEnum = tables.elements();
//        while (tEnum.hasMoreElements()) {
//            ((Table) tEnum.nextElement()).showPlayed(event.getValue());
//        }
    }
    
    public void playerStandRequest(TableEvent event) 
    {
        Enumeration tEnum;
        int chair;
        TrucoPlayer player;
        
        tEnum = tables.elements();
        while (tEnum.hasMoreElements()) {
            ((Table) tEnum.nextElement()).standPlayer
            (
            event.getValue()
            );
        }
    }
    
    public void playerStanded(TableEvent event) 
    {
    }

	/* (non-Javadoc)
	 * @see py.edu.uca.fcyt.toluca.event.SpaceListener#chatMessageSent(py.edu.uca.fcyt.toluca.event.RoomEvent)
	 */
	public void chatMessageSent(RoomEvent event) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see py.edu.uca.fcyt.toluca.event.TableListener#tableDestroyed(py.edu.uca.fcyt.toluca.event.TableEvent)
	 */
	public void tableDestroyed(TableEvent event) {
		// TODO Auto-generated method stub
		
	}

    /* (non-Javadoc)
     * @see py.edu.uca.fcyt.toluca.event.TableListener#invitationRequest(py.edu.uca.fcyt.toluca.event.RoomEvent)
     */
    public void invitationRequest(RoomEvent event) {
        // TODO Auto-generated method stub
        
    }

    /* (non-Javadoc)
     * @see py.edu.uca.fcyt.toluca.event.TableListener#invitationRejected(py.edu.uca.fcyt.toluca.event.RoomEvent)
     */
    public void invitationRejected(RoomEvent re) {
        // TODO Auto-generated method stub
        
    }
}
