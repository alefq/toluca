/*
 * TrucoFrontEndTester.java
 *
 * Created on 3 de abril de 2003, 11:25 PM
 */

package py.edu.uca.fcyt.toluca.table;

import py.edu.uca.fcyt.toluca.game.*;
import py.edu.uca.fcyt.toluca.*;
import py.edu.uca.fcyt.toluca.event.*;
import py.edu.uca.fcyt.toluca.statusGame.*;
import py.edu.uca.fcyt.game.*;


import java.util.*;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author  PABLO JAVIER
 */
class TrucoFrontEndTester extends JFrame
implements TableListener, TrucoListener
{
    private Vector tables;
    private Vector players;
    private TrucoPlayer[] gamePlayers;

    
    
    /** Creates new form TrucoFrontEndTester */
    public TrucoFrontEndTester()
    {
        tables = new Vector();
        players = new Vector();
        gamePlayers = new TrucoPlayer[6];
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pJugadores = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtName = new javax.swing.JTextField();
        jlRating = new javax.swing.JLabel();
        jtRating = new javax.swing.JTextField();
        jbJoin = new javax.swing.JButton();
        jbCreate = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jlName.setText("Nombre:");
        pJugadores.add(jlName);

        jtName.setPreferredSize(new java.awt.Dimension(100, 20));
        pJugadores.add(jtName);

        jlRating.setText("Rating:");
        pJugadores.add(jlRating);

        jtRating.setPreferredSize(new java.awt.Dimension(50, 20));
        jtRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtRatingActionPerformed(evt);
            }
        });

        pJugadores.add(jtRating);

        jbJoin.setText("Unir");
        jbJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbJoinActionPerformed(evt);
            }
        });

        pJugadores.add(jbJoin);

        jbCreate.setText("Crear nueva");
        jbCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCreateActionPerformed(evt);
            }
        });

        pJugadores.add(jbCreate);

        getContentPane().add(pJugadores, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    public void chatMessageSent(ChatPanelContainer cpc, Player player, String htmlMessage) {
        
    }

    
    private void jbJoinActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jbJoinActionPerformed
        Enumeration tEnum;
        Enumeration pEnum;
        TrucoPlayer player;
        Table table;

		// crea el Player
        player = new TrucoPlayer(jtName.getText());

		// crea el Table con player actual = 'player'
        // y registra este TrucoFrontEndTester como 
        // listener de eventos de mesa
        table = new Table(player, false);
        table.addTableListener(this);

		// obtiene los Players cargados actualmente
        pEnum = players.elements();
        
        // agrega a la nueva tabla los Players cargados
        while (pEnum.hasMoreElements())
            table.addPlayer((Player) pEnum.nextElement());

        // agrega a la nueva tabla al vector de tablas
        tables.add(table);

		// obtiene las tablas creadas
        tEnum = tables.elements();
        
        // agrega a cada tabla el Player creado
        while (tEnum.hasMoreElements())
            ((Table) tEnum.nextElement()).addPlayer(player);

		// agrega a 'player' al vector de Players
        players.add(player);
        
        table.show();

    }//GEN-LAST:event_jbJoinActionPerformed

    private void jbCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCreateActionPerformed
        // Add your handling code here:
//        Player player = new Player(jtName.getText(), Integer.parseInt(jtRating.getText()));
//        Table table = new Table(player, true);
//        table.addTableListener(this);
//        tables.add(table);
//
//        players.add(player);
//        table.startGame();


    }//GEN-LAST:event_jbCreateActionPerformed

    private void jtRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtRatingActionPerformed
    }//GEN-LAST:event_jtRatingActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
//        JFrame jfOut = new JFrame("Out");
//        TextArea tArea = new TextArea();
//        
//        jfOut.getContentPane().add(tArea);
//        jfOut.setSize(500, 500);
//        jfOut.show();
//        
//        System.setOut(new PrintStream());

        new TrucoFrontEndTester().show();
    }


    public void chatMessageRequested(Player player, String htmlMessage) {
    }


    public void chatMessageSent(Player player, String htmlMessage) {
    }


    public void gameFinished(Game game) {}

	/** Invocado cuando se desea iniciar el juego */
    public void gameStartRequest(TableEvent event)
    {
    	Enumeration tEnum;
    	TrucoGame tGame;
        TrucoTeam tTeams[];

		System.out.println("Requesting game start...");

		tTeams = getTeams();
		
		// se crea el TrucoGame con los teams creados
        tGame = new TrucoGame(tTeams[0], tTeams[1]);
        
		// se llama al 'startGame' de todas las tablas
    	tEnum = tables.elements();
    	while (tEnum.hasMoreElements())
	    {
	    	((Table) tEnum.nextElement()).startGame(tGame);
	    }

		// da la orden de inicio de juego a 'tGame'
		tGame.startGame();
	}

    public void gameStarted(Game game)
    {
    }


    public void playerJoined(Player player) {
        System.out.println("Player joined");
    }


    public void playerKicked(Player player) {
        System.out.println("Player kicked");
    }


    public void playerLeft(Player player) {
        System.out.println("Player left");
    }

    public void playerSit(Player player, int chair) 
    {
    }


    public void tableLocked(Table table) {
        System.out.println("Table locked");
    }


    public void tableUnlocked(Table table) {
        System.out.println("Table unlocked");
    }

    public void sitRequested(Player player, int chair) 
    {
    	Enumeration tEnum;
    	
        System.out.println("Player " + player.getName() + " sitting...");
        gamePlayers[chair] = (TrucoPlayer) player;

		// se llama al 'playerSit' de todas las tablas
    	tEnum = tables.elements();
    	while (tEnum.hasMoreElements())
	    {
	    	((Table) tEnum.nextElement()).sitPlayer(player, chair);
	    }
    }

    public void cardsDeal(TrucoEvent event) {
    }

    public void endOfGame(TrucoEvent event) {
    }

    public void endOfHand(TrucoEvent event) {
    }

    public void gameStarted(TrucoEvent event) {
    }

    public Player getAssociatedPlayer() {
        return null;
    }

    public void handStarted(TrucoEvent event) {
    }

    public void play(TrucoEvent event) {
    }

    public void turn(TrucoEvent event) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pJugadores;
    private javax.swing.JButton jbCreate;
    private javax.swing.JLabel jlRating;
    private javax.swing.JTextField jtRating;
    private javax.swing.JTextField jtName;
    private javax.swing.JLabel jlName;
    private javax.swing.JButton jbJoin;
    // End of variables declaration//GEN-END:variables


	protected TrucoTeam[] getTeams()
	{
		TrucoTeam tTeams[];

		// se crean los teams
		tTeams = new TrucoTeam[]
		{
	        new TrucoTeam("Nos"),
	        new TrucoTeam("Ellos")
	    };
	    
		// se agregan los players a los teams
		for (int i = 0; i < 6; i++)
			if (gamePlayers[i] != null) 
			{
				tTeams[i % 2].addPlayer(gamePlayers[i]);
		        System.out.println("Team " + (i % 2) + ": player " + gamePlayers[i].getName());
			}
			
		return tTeams;
	}
        
        /** <p>
         * Does ...
         * </p><p>
         *
         * @param player ...
         * </p><p>
         * @param htmlMessage ...
         * </p><p>
         *
         * </p>
         *
         */
        public void chatMessageRequested(ChatPanelContainer cpc, Player player, String htmlMessage) {
        }
        
}
